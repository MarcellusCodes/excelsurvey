import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";

import { trpc } from "../utils/trpc";
import { useQueryClient } from "@tanstack/react-query";
import { useRouter } from "next/router";

const Home: NextPage = () => {
  const router = useRouter();
  const queryClient = useQueryClient();
  const utils = trpc.useContext();
  const { data: sessionData } = useSession();
  const polls = trpc.poll.getAll.useQuery(undefined, {
    enabled: sessionData?.user !== undefined,
  });

  const addPoll = trpc.poll.addPoll.useMutation({
    onSuccess: async () => {
      utils.poll.getAll.invalidate();
    },
  });

  const handleAddPoll = () => {
    addPoll.mutate({
      title: "Test",
      description: "This is just a Test",
    });
  };

  return (
    <>
      <Head>
        <title>ExcelSurvey</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <AuthShowcase />
        <div className="flex flex-row flex-wrap items-center gap-6">
          {polls.data?.map((poll) => (
            <div key={poll.id} className="h-12 w-12 bg-purple-300"></div>
          ))}
        </div>
        <div className="mt-10" />
        <button
          className={`rounded-full bg-purple-600 px-8 py-2 hover:bg-purple-400 active:bg-purple-700 ${
            addPoll.isLoading && "bg-gray-400"
          } `}
          onClick={handleAddPoll}
          disabled={addPoll.isLoading}
        >
          Add Poll
        </button>
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData?.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => signOut() : () => signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};
