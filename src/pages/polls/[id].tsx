import { GetServerSidePropsContext, type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";

import { trpc } from "../../utils/trpc";
import { useQueryClient } from "@tanstack/react-query";
import { useRouter } from "next/router";
import * as z from "zod";
import React from "react";

interface pollPageProps {
  id: string;
}

const Poll: NextPage<pollPageProps> = ({ id }: { id: string }) => {
  const router = useRouter();
  const utils = trpc.useContext();
  const { data: sessionData } = useSession();
  const poll = trpc.poll.getById.useQuery({ id: id });

  const addVote = trpc.choice.addVote.useMutation({
    onSuccess: async () => {
      utils.poll.getById.invalidate();
    },
  });

  const handleAddVote = ({ id }: { id: string }) => {
    addVote.mutate({ id: id });
  };

  if (poll.isLoading) {
    return <h1>Loading...</h1>;
  }

  return (
    <>
      <Head>
        <title>ExcelSurvey Poll {id}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <Link className="bg-purple-600 p-2 " href="/">
          Back to polls
        </Link>
        <ul>
          <li>{poll.data?.id}</li>
          <li>{poll.data?.title}</li>
          <li>{poll.data?.description}</li>
          <li>
            {poll.data?.choices.map((choice) => (
              <div
                key={choice.id}
                className="flex flex-col items-start border-t border-purple-300 p-2"
              >
                <span>{choice.id}</span>
                <span>{choice.title}</span>
                <span>Votes: {choice.votes}</span>
                <button
                  onClick={() => {
                    handleAddVote({ id: choice.id });
                  }}
                  className="rounded-md bg-green-600 px-4 py-1"
                >
                  Vote
                </button>
              </div>
            ))}
          </li>
          <li>{poll.data?.published}</li>
        </ul>
      </main>
    </>
  );
};

export default Poll;

export async function getServerSideProps(
  ctx: GetServerSidePropsContext<{ id: string }>
) {
  const { params } = ctx;
  const { id } = params ?? { id: null };

  return {
    props: {
      id: id,
    },
  };
}
